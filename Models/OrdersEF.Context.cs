//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Renew_Laptop.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RenewLaptopEntities : DbContext
    {
        public RenewLaptopEntities()
            : base("name=RenewLaptopEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>().Property(p => p.CustomerID).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            modelBuilder.Entity<Payment>().Property(p => p.PaymentID).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            modelBuilder.Entity<OrderDetail>().Property(p => p.OrderID).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<IP2LOCATION> IP2LOCATION { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<error_log> error_log { get; set; }
    
        public virtual int Create_Order(string t_id, Nullable<System.DateTime> paydate, Nullable<System.DateTime> validupto, string fname, string lname, string email, string phone, string cname, string gstin, string addr1, string addr2, string city, string state, string zip, string transactiontype, Nullable<bool> deleted, Nullable<System.DateTime> billdate, string ip, Nullable<int> pr_id, string r_order_id, Nullable<double> price, Nullable<int> qnt, Nullable<double> gst, Nullable<double> disc, Nullable<double> total)
        {
            var t_idParameter = t_id != null ?
                new ObjectParameter("t_id", t_id) :
                new ObjectParameter("t_id", typeof(string));
    
            var paydateParameter = paydate.HasValue ?
                new ObjectParameter("paydate", paydate) :
                new ObjectParameter("paydate", typeof(System.DateTime));
    
            var validuptoParameter = validupto.HasValue ?
                new ObjectParameter("validupto", validupto) :
                new ObjectParameter("validupto", typeof(System.DateTime));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cnameParameter = cname != null ?
                new ObjectParameter("cname", cname) :
                new ObjectParameter("cname", typeof(string));
    
            var gstinParameter = gstin != null ?
                new ObjectParameter("gstin", gstin) :
                new ObjectParameter("gstin", typeof(string));
    
            var addr1Parameter = addr1 != null ?
                new ObjectParameter("addr1", addr1) :
                new ObjectParameter("addr1", typeof(string));
    
            var addr2Parameter = addr2 != null ?
                new ObjectParameter("addr2", addr2) :
                new ObjectParameter("addr2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var transactiontypeParameter = transactiontype != null ?
                new ObjectParameter("transactiontype", transactiontype) :
                new ObjectParameter("transactiontype", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("deleted", deleted) :
                new ObjectParameter("deleted", typeof(bool));
    
            var billdateParameter = billdate.HasValue ?
                new ObjectParameter("billdate", billdate) :
                new ObjectParameter("billdate", typeof(System.DateTime));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var pr_idParameter = pr_id.HasValue ?
                new ObjectParameter("pr_id", pr_id) :
                new ObjectParameter("pr_id", typeof(int));
    
            var r_order_idParameter = r_order_id != null ?
                new ObjectParameter("r_order_id", r_order_id) :
                new ObjectParameter("r_order_id", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(double));
    
            var qntParameter = qnt.HasValue ?
                new ObjectParameter("qnt", qnt) :
                new ObjectParameter("qnt", typeof(int));
    
            var gstParameter = gst.HasValue ?
                new ObjectParameter("gst", gst) :
                new ObjectParameter("gst", typeof(double));
    
            var discParameter = disc.HasValue ?
                new ObjectParameter("disc", disc) :
                new ObjectParameter("disc", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Create_Order", t_idParameter, paydateParameter, validuptoParameter, fnameParameter, lnameParameter, emailParameter, phoneParameter, cnameParameter, gstinParameter, addr1Parameter, addr2Parameter, cityParameter, stateParameter, zipParameter, transactiontypeParameter, deletedParameter, billdateParameter, ipParameter, pr_idParameter, r_order_idParameter, priceParameter, qntParameter, gstParameter, discParameter, totalParameter);
        }
    
        public virtual int error(string ex, string time, string ip, string code)
        {
            var exParameter = ex != null ?
                new ObjectParameter("ex", ex) :
                new ObjectParameter("ex", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("error", exParameter, timeParameter, ipParameter, codeParameter);
        }
    
        public virtual int Insert_Message(string name, string email, string contact, string subject, string query, string ip, string country, string timestamp)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("contact", contact) :
                new ObjectParameter("contact", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var timestampParameter = timestamp != null ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Message", nameParameter, emailParameter, contactParameter, subjectParameter, queryParameter, ipParameter, countryParameter, timestampParameter);
        }
    
        public virtual ObjectResult<string> ip2country(string cip)
        {
            var cipParameter = cip != null ?
                new ObjectParameter("cip", cip) :
                new ObjectParameter("cip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ip2country", cipParameter);
        }
    }
}
